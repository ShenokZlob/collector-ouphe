// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/ShenokZlob/collector-ouphe/pkg/contracts/auth"
	"github.com/ShenokZlob/collector-ouphe/pkg/contracts/collections"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCollectorClient creates a new instance of MockCollectorClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollectorClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollectorClient {
	mock := &MockCollectorClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCollectorClient is an autogenerated mock type for the CollectorClient type
type MockCollectorClient struct {
	mock.Mock
}

type MockCollectorClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollectorClient) EXPECT() *MockCollectorClient_Expecter {
	return &MockCollectorClient_Expecter{mock: &_m.Mock}
}

// CheckUser provides a mock function for the type MockCollectorClient
func (_mock *MockCollectorClient) CheckUser(reqData *auth.CheckUserRequest) (*auth.CheckUserResponse, error) {
	ret := _mock.Called(reqData)

	if len(ret) == 0 {
		panic("no return value specified for CheckUser")
	}

	var r0 *auth.CheckUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*auth.CheckUserRequest) (*auth.CheckUserResponse, error)); ok {
		return returnFunc(reqData)
	}
	if returnFunc, ok := ret.Get(0).(func(*auth.CheckUserRequest) *auth.CheckUserResponse); ok {
		r0 = returnFunc(reqData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.CheckUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*auth.CheckUserRequest) error); ok {
		r1 = returnFunc(reqData)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollectorClient_CheckUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUser'
type MockCollectorClient_CheckUser_Call struct {
	*mock.Call
}

// CheckUser is a helper method to define mock.On call
//   - reqData
func (_e *MockCollectorClient_Expecter) CheckUser(reqData interface{}) *MockCollectorClient_CheckUser_Call {
	return &MockCollectorClient_CheckUser_Call{Call: _e.mock.On("CheckUser", reqData)}
}

func (_c *MockCollectorClient_CheckUser_Call) Run(run func(reqData *auth.CheckUserRequest)) *MockCollectorClient_CheckUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*auth.CheckUserRequest))
	})
	return _c
}

func (_c *MockCollectorClient_CheckUser_Call) Return(checkUserResponse *auth.CheckUserResponse, err error) *MockCollectorClient_CheckUser_Call {
	_c.Call.Return(checkUserResponse, err)
	return _c
}

func (_c *MockCollectorClient_CheckUser_Call) RunAndReturn(run func(reqData *auth.CheckUserRequest) (*auth.CheckUserResponse, error)) *MockCollectorClient_CheckUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCollection provides a mock function for the type MockCollectorClient
func (_mock *MockCollectorClient) CreateCollection(ctx context.Context, req *collections.CreateCollectionRequest) (*collections.Collection, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollection")
	}

	var r0 *collections.Collection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *collections.CreateCollectionRequest) (*collections.Collection, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *collections.CreateCollectionRequest) *collections.Collection); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collections.Collection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *collections.CreateCollectionRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollectorClient_CreateCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCollection'
type MockCollectorClient_CreateCollection_Call struct {
	*mock.Call
}

// CreateCollection is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockCollectorClient_Expecter) CreateCollection(ctx interface{}, req interface{}) *MockCollectorClient_CreateCollection_Call {
	return &MockCollectorClient_CreateCollection_Call{Call: _e.mock.On("CreateCollection", ctx, req)}
}

func (_c *MockCollectorClient_CreateCollection_Call) Run(run func(ctx context.Context, req *collections.CreateCollectionRequest)) *MockCollectorClient_CreateCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*collections.CreateCollectionRequest))
	})
	return _c
}

func (_c *MockCollectorClient_CreateCollection_Call) Return(collection *collections.Collection, err error) *MockCollectorClient_CreateCollection_Call {
	_c.Call.Return(collection, err)
	return _c
}

func (_c *MockCollectorClient_CreateCollection_Call) RunAndReturn(run func(ctx context.Context, req *collections.CreateCollectionRequest) (*collections.Collection, error)) *MockCollectorClient_CreateCollection_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCollection provides a mock function for the type MockCollectorClient
func (_mock *MockCollectorClient) DeleteCollection(ctx context.Context, collectionID string) error {
	ret := _mock.Called(ctx, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, collectionID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCollectorClient_DeleteCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollection'
type MockCollectorClient_DeleteCollection_Call struct {
	*mock.Call
}

// DeleteCollection is a helper method to define mock.On call
//   - ctx
//   - collectionID
func (_e *MockCollectorClient_Expecter) DeleteCollection(ctx interface{}, collectionID interface{}) *MockCollectorClient_DeleteCollection_Call {
	return &MockCollectorClient_DeleteCollection_Call{Call: _e.mock.On("DeleteCollection", ctx, collectionID)}
}

func (_c *MockCollectorClient_DeleteCollection_Call) Run(run func(ctx context.Context, collectionID string)) *MockCollectorClient_DeleteCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCollectorClient_DeleteCollection_Call) Return(err error) *MockCollectorClient_DeleteCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCollectorClient_DeleteCollection_Call) RunAndReturn(run func(ctx context.Context, collectionID string) error) *MockCollectorClient_DeleteCollection_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserCollections provides a mock function for the type MockCollectorClient
func (_mock *MockCollectorClient) GetUserCollections(ctx context.Context) ([]collections.Collection, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserCollections")
	}

	var r0 []collections.Collection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]collections.Collection, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []collections.Collection); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]collections.Collection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollectorClient_GetUserCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserCollections'
type MockCollectorClient_GetUserCollections_Call struct {
	*mock.Call
}

// GetUserCollections is a helper method to define mock.On call
//   - ctx
func (_e *MockCollectorClient_Expecter) GetUserCollections(ctx interface{}) *MockCollectorClient_GetUserCollections_Call {
	return &MockCollectorClient_GetUserCollections_Call{Call: _e.mock.On("GetUserCollections", ctx)}
}

func (_c *MockCollectorClient_GetUserCollections_Call) Run(run func(ctx context.Context)) *MockCollectorClient_GetUserCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCollectorClient_GetUserCollections_Call) Return(collections1 []collections.Collection, err error) *MockCollectorClient_GetUserCollections_Call {
	_c.Call.Return(collections1, err)
	return _c
}

func (_c *MockCollectorClient_GetUserCollections_Call) RunAndReturn(run func(ctx context.Context) ([]collections.Collection, error)) *MockCollectorClient_GetUserCollections_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function for the type MockCollectorClient
func (_mock *MockCollectorClient) RegisterUser(reqData *auth.RegisterRequest) (*auth.RegisterResponse, error) {
	ret := _mock.Called(reqData)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *auth.RegisterResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*auth.RegisterRequest) (*auth.RegisterResponse, error)); ok {
		return returnFunc(reqData)
	}
	if returnFunc, ok := ret.Get(0).(func(*auth.RegisterRequest) *auth.RegisterResponse); ok {
		r0 = returnFunc(reqData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.RegisterResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*auth.RegisterRequest) error); ok {
		r1 = returnFunc(reqData)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollectorClient_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type MockCollectorClient_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - reqData
func (_e *MockCollectorClient_Expecter) RegisterUser(reqData interface{}) *MockCollectorClient_RegisterUser_Call {
	return &MockCollectorClient_RegisterUser_Call{Call: _e.mock.On("RegisterUser", reqData)}
}

func (_c *MockCollectorClient_RegisterUser_Call) Run(run func(reqData *auth.RegisterRequest)) *MockCollectorClient_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*auth.RegisterRequest))
	})
	return _c
}

func (_c *MockCollectorClient_RegisterUser_Call) Return(registerResponse *auth.RegisterResponse, err error) *MockCollectorClient_RegisterUser_Call {
	_c.Call.Return(registerResponse, err)
	return _c
}

func (_c *MockCollectorClient_RegisterUser_Call) RunAndReturn(run func(reqData *auth.RegisterRequest) (*auth.RegisterResponse, error)) *MockCollectorClient_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// RenameCollection provides a mock function for the type MockCollectorClient
func (_mock *MockCollectorClient) RenameCollection(ctx context.Context, collectionID string, req *collections.RenameCollectionRequest) error {
	ret := _mock.Called(ctx, collectionID, req)

	if len(ret) == 0 {
		panic("no return value specified for RenameCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *collections.RenameCollectionRequest) error); ok {
		r0 = returnFunc(ctx, collectionID, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCollectorClient_RenameCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameCollection'
type MockCollectorClient_RenameCollection_Call struct {
	*mock.Call
}

// RenameCollection is a helper method to define mock.On call
//   - ctx
//   - collectionID
//   - req
func (_e *MockCollectorClient_Expecter) RenameCollection(ctx interface{}, collectionID interface{}, req interface{}) *MockCollectorClient_RenameCollection_Call {
	return &MockCollectorClient_RenameCollection_Call{Call: _e.mock.On("RenameCollection", ctx, collectionID, req)}
}

func (_c *MockCollectorClient_RenameCollection_Call) Run(run func(ctx context.Context, collectionID string, req *collections.RenameCollectionRequest)) *MockCollectorClient_RenameCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*collections.RenameCollectionRequest))
	})
	return _c
}

func (_c *MockCollectorClient_RenameCollection_Call) Return(err error) *MockCollectorClient_RenameCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCollectorClient_RenameCollection_Call) RunAndReturn(run func(ctx context.Context, collectionID string, req *collections.RenameCollectionRequest) error) *MockCollectorClient_RenameCollection_Call {
	_c.Call.Return(run)
	return _c
}
