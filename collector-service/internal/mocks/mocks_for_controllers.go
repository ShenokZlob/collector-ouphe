// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/ShenokZlob/collector-ouphe/collector-service/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthServicer creates a new instance of MockAuthServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthServicer {
	mock := &MockAuthServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthServicer is an autogenerated mock type for the AuthServicer type
type MockAuthServicer struct {
	mock.Mock
}

type MockAuthServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthServicer) EXPECT() *MockAuthServicer_Expecter {
	return &MockAuthServicer_Expecter{mock: &_m.Mock}
}

// Login provides a mock function for the type MockAuthServicer
func (_mock *MockAuthServicer) Login(user *models.User) (string, *models.ResponseErr) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 *models.ResponseErr
	if returnFunc, ok := ret.Get(0).(func(*models.User) (string, *models.ResponseErr)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.User) string); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*models.User) *models.ResponseErr); ok {
		r1 = returnFunc(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseErr)
		}
	}
	return r0, r1
}

// MockAuthServicer_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthServicer_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - user
func (_e *MockAuthServicer_Expecter) Login(user interface{}) *MockAuthServicer_Login_Call {
	return &MockAuthServicer_Login_Call{Call: _e.mock.On("Login", user)}
}

func (_c *MockAuthServicer_Login_Call) Run(run func(user *models.User)) *MockAuthServicer_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *MockAuthServicer_Login_Call) Return(s string, responseErr *models.ResponseErr) *MockAuthServicer_Login_Call {
	_c.Call.Return(s, responseErr)
	return _c
}

func (_c *MockAuthServicer_Login_Call) RunAndReturn(run func(user *models.User) (string, *models.ResponseErr)) *MockAuthServicer_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockAuthServicer
func (_mock *MockAuthServicer) Register(user *models.User) (string, *models.ResponseErr) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 string
	var r1 *models.ResponseErr
	if returnFunc, ok := ret.Get(0).(func(*models.User) (string, *models.ResponseErr)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.User) string); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*models.User) *models.ResponseErr); ok {
		r1 = returnFunc(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseErr)
		}
	}
	return r0, r1
}

// MockAuthServicer_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockAuthServicer_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - user
func (_e *MockAuthServicer_Expecter) Register(user interface{}) *MockAuthServicer_Register_Call {
	return &MockAuthServicer_Register_Call{Call: _e.mock.On("Register", user)}
}

func (_c *MockAuthServicer_Register_Call) Run(run func(user *models.User)) *MockAuthServicer_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *MockAuthServicer_Register_Call) Return(s string, responseErr *models.ResponseErr) *MockAuthServicer_Register_Call {
	_c.Call.Return(s, responseErr)
	return _c
}

func (_c *MockAuthServicer_Register_Call) RunAndReturn(run func(user *models.User) (string, *models.ResponseErr)) *MockAuthServicer_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Who provides a mock function for the type MockAuthServicer
func (_mock *MockAuthServicer) Who(userTelegramId string) (string, *models.ResponseErr) {
	ret := _mock.Called(userTelegramId)

	if len(ret) == 0 {
		panic("no return value specified for Who")
	}

	var r0 string
	var r1 *models.ResponseErr
	if returnFunc, ok := ret.Get(0).(func(string) (string, *models.ResponseErr)); ok {
		return returnFunc(userTelegramId)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(userTelegramId)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) *models.ResponseErr); ok {
		r1 = returnFunc(userTelegramId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseErr)
		}
	}
	return r0, r1
}

// MockAuthServicer_Who_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Who'
type MockAuthServicer_Who_Call struct {
	*mock.Call
}

// Who is a helper method to define mock.On call
//   - userTelegramId
func (_e *MockAuthServicer_Expecter) Who(userTelegramId interface{}) *MockAuthServicer_Who_Call {
	return &MockAuthServicer_Who_Call{Call: _e.mock.On("Who", userTelegramId)}
}

func (_c *MockAuthServicer_Who_Call) Run(run func(userTelegramId string)) *MockAuthServicer_Who_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthServicer_Who_Call) Return(s string, responseErr *models.ResponseErr) *MockAuthServicer_Who_Call {
	_c.Call.Return(s, responseErr)
	return _c
}

func (_c *MockAuthServicer_Who_Call) RunAndReturn(run func(userTelegramId string) (string, *models.ResponseErr)) *MockAuthServicer_Who_Call {
	_c.Call.Return(run)
	return _c
}
