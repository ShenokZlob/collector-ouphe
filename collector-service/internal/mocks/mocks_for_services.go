// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/ShenokZlob/collector-ouphe/collector-service/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthRepositorer creates a new instance of MockAuthRepositorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepositorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepositorer {
	mock := &MockAuthRepositorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthRepositorer is an autogenerated mock type for the AuthRepositorer type
type MockAuthRepositorer struct {
	mock.Mock
}

type MockAuthRepositorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepositorer) EXPECT() *MockAuthRepositorer_Expecter {
	return &MockAuthRepositorer_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockAuthRepositorer
func (_mock *MockAuthRepositorer) CreateUser(user *models.User) (*models.User, *models.ResponseErr) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *models.User
	var r1 *models.ResponseErr
	if returnFunc, ok := ret.Get(0).(func(*models.User) (*models.User, *models.ResponseErr)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.User) *models.User); ok {
		r0 = returnFunc(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*models.User) *models.ResponseErr); ok {
		r1 = returnFunc(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseErr)
		}
	}
	return r0, r1
}

// MockAuthRepositorer_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockAuthRepositorer_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user
func (_e *MockAuthRepositorer_Expecter) CreateUser(user interface{}) *MockAuthRepositorer_CreateUser_Call {
	return &MockAuthRepositorer_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *MockAuthRepositorer_CreateUser_Call) Run(run func(user *models.User)) *MockAuthRepositorer_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *MockAuthRepositorer_CreateUser_Call) Return(user1 *models.User, responseErr *models.ResponseErr) *MockAuthRepositorer_CreateUser_Call {
	_c.Call.Return(user1, responseErr)
	return _c
}

func (_c *MockAuthRepositorer_CreateUser_Call) RunAndReturn(run func(user *models.User) (*models.User, *models.ResponseErr)) *MockAuthRepositorer_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByTelegramID provides a mock function for the type MockAuthRepositorer
func (_mock *MockAuthRepositorer) FindUserByTelegramID(telegramId int64) (*models.User, *models.ResponseErr) {
	ret := _mock.Called(telegramId)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByTelegramID")
	}

	var r0 *models.User
	var r1 *models.ResponseErr
	if returnFunc, ok := ret.Get(0).(func(int64) (*models.User, *models.ResponseErr)); ok {
		return returnFunc(telegramId)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) *models.User); ok {
		r0 = returnFunc(telegramId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64) *models.ResponseErr); ok {
		r1 = returnFunc(telegramId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseErr)
		}
	}
	return r0, r1
}

// MockAuthRepositorer_FindUserByTelegramID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByTelegramID'
type MockAuthRepositorer_FindUserByTelegramID_Call struct {
	*mock.Call
}

// FindUserByTelegramID is a helper method to define mock.On call
//   - telegramId
func (_e *MockAuthRepositorer_Expecter) FindUserByTelegramID(telegramId interface{}) *MockAuthRepositorer_FindUserByTelegramID_Call {
	return &MockAuthRepositorer_FindUserByTelegramID_Call{Call: _e.mock.On("FindUserByTelegramID", telegramId)}
}

func (_c *MockAuthRepositorer_FindUserByTelegramID_Call) Run(run func(telegramId int64)) *MockAuthRepositorer_FindUserByTelegramID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockAuthRepositorer_FindUserByTelegramID_Call) Return(user *models.User, responseErr *models.ResponseErr) *MockAuthRepositorer_FindUserByTelegramID_Call {
	_c.Call.Return(user, responseErr)
	return _c
}

func (_c *MockAuthRepositorer_FindUserByTelegramID_Call) RunAndReturn(run func(telegramId int64) (*models.User, *models.ResponseErr)) *MockAuthRepositorer_FindUserByTelegramID_Call {
	_c.Call.Return(run)
	return _c
}
